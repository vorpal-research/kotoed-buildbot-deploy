# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

from buildbot.secrets.providers.file import SecretInAFile
from buildbot.process.properties import Interpolate

from org.jetbrains.research.kotoed.buildbot import custom as kt, build_steps as kt_steps

c = BuildmasterConfig = {}

####### WORKERS

worker_name = "BUILDBOT_WORKER_NAME"
worker_pwd = "BUILDBOT_WORKER_PWD"

c['workers'] = [worker.Worker(worker_name, worker_pwd)]

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []

####### SCHEDULERS

c['schedulers'] = [
    schedulers.ForceScheduler(
        name="FAKE",
        builderNames=["FAKE"])
]

####### BUILDERS

c['builders'] = [
    util.BuilderConfig(name="FAKE",
        workernames=[worker_name],
        factory=util.BuildFactory())
]

####### SECRETS

c['secretsProviders'] = [
    SecretInAFile(dirname="secrets")
]

####### BUILDBOT SERVICES

c['collapseRequests'] = False

c['services'] = [
    kt.BuildbotDynamicService(course_name="KotlinAsFirst-2017")
]

def processKotlinAsFirstProject(name, project):
    c['schedulers'].append(schedulers.ForceScheduler(
        name="scheduler_%s" % kt.string2identifier(name),
        builderNames=["builder_%s" % kt.string2identifier(name)]))

    factory = util.BuildFactory()

    factory.addStep(kt_steps.VCS(
        vcs_type=project.type,
        repourl=project.url,
        mode='full',
        method='fresh'
    ))

    with factory.withSecrets([
        ("id_rsa.kotoed", Interpolate("%(secret:id_rsa.kotoed)s"))
    ]):
        factory.addStep(steps.ShellCommand(
            command=["git", "clone", "git@bitbucket.org:kotlinpolytech/kotlinasfirsttests.git", "random-tests"],
            env={"GIT_SSH_COMMAND": "ssh -i id_rsa.kotoed"}
        ))
        # factory.addStep(steps.ShellCommand(
        #     command=["git", "-C", "random-tests", "pull"],
        #     env={"GIT_SSH_COMMAND": "ssh -i ../id_rsa.kotoed"}
        # ))

    factory.addStep(steps.ShellCommand(command=["rsync", "-rtv", "--ignore-existing", "random-tests/test/", "test/"]))
    factory.addStep(steps.ShellCommand(command=["rsync", "random-tests/pom.xml", "pom.xml"]))

    factory.addStep(steps.ShellCommand(
        command=["mvn", "clean", "test-compile", "kfirst-runner:run"],
        timeout=500
    ))

    # factory.addStep(kt_steps.PlainTextResults(file_name_template="**/TEST-*.xml"))
    factory.addStep(kt_steps.PlainTextResults(file_name_template="**/results.json"))

    c['builders'].append(
        util.BuilderConfig(name="builder_%s" % kt.string2identifier(name),
            workernames=[worker_name],
            factory=factory))

kt.load_dynamic_projects("KotlinAsFirst-2017", processKotlinAsFirstProject)

####### PROJECT IDENTITY

c['title'] = "Kotoed Buildbot"
c['titleURL'] = "https://not-rocket.science"

c['buildbotURL'] = "http://localhost:8010/"

c['www'] = dict(
    port=8010,
    plugins=dict(waterfall_view={}, console_view={}),
    allowed_origins=['*'])

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
